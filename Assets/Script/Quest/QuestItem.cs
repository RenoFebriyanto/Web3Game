using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;

public class QuestItem : MonoBehaviour
{
    public enum RewardType { Coins, Shards, Energy }
    public enum RequirementType { None, LoginDays, PlayTimeSeconds, CoinsCollected, DistanceMeters }

    [Header("Meta")]
    public string questId; // unique per spawn (used for persistence)
    public bool isWeekly = false; // used by spawner
    public int cycleId = 0; // for weekly (generated by spawner)

    [Header("Requirement")]
    public RequirementType requirementType = RequirementType.LoginDays;
    public float requiredValue = 1f; // meaning depends on requirementType

    [Header("Reward")]
    public RewardType rewardType = RewardType.Energy;
    public long rewardCoins = 100;
    public int rewardShards = 5;
    public int rewardEnergy = 1;

    [Header("UI refs (TMP)")]
    public TMP_Text titleText;
    public Button goButton;
    public TMP_Text goButtonText;
    public Image goButtonImage;
    public Image iconImage;

    [Header("Button sprites")]
    public Sprite spriteAvailable;
    public Sprite spriteLocked;
    public Sprite spriteClaimed;

    [Header("Audio")]
    public AudioClip claimSfx;

    bool claimed = false;
    bool requirementMet = false;

    void Awake()
    {
        // restore claimed by persisted quest id (questId should be unique per cycle/day)
        if (!string.IsNullOrEmpty(questId))
        {
            claimed = PlayerPrefs.GetInt("quest_claimed_" + questId, 0) == 1;
        }
    }

    void OnEnable()
    {
        if (QuestProgress.Instance != null)
            QuestProgress.Instance.OnProgressChanged += OnProgressChanged;
    }

    void OnDisable()
    {
        if (QuestProgress.Instance != null)
            QuestProgress.Instance.OnProgressChanged -= OnProgressChanged;
    }

    void Start()
    {
        if (goButton != null)
        {
            goButton.onClick.AddListener(OnGoClicked);
        }
        EvaluateRequirement();
        UpdateVisual();
    }

    void OnDestroy()
    {
        if (goButton != null) goButton.onClick.RemoveListener(OnGoClicked);
    }

    void OnProgressChanged()
    {
        EvaluateRequirement();
        UpdateVisual();
    }

    public void EvaluateRequirement()
    {
        requirementMet = false;
        var prog = QuestProgress.Instance;
        if (prog == null) { requirementMet = false; return; }

        switch (requirementType)
        {
            case RequirementType.None:
                requirementMet = true; break;
            case RequirementType.LoginDays:
                requirementMet = prog.GetLoginDays() >= (int)requiredValue; break;
            case RequirementType.PlayTimeSeconds:
                requirementMet = prog.GetPlayTimeSeconds() >= requiredValue; break;
            case RequirementType.CoinsCollected:
                requirementMet = prog.GetCoinsCollected() >= (long)requiredValue; break;
            case RequirementType.DistanceMeters:
                requirementMet = prog.GetDistanceMeters() >= requiredValue; break;
            default:
                requirementMet = false; break;
        }
    }

    public void OnGoClicked()
    {
        if (claimed) return;
        if (!requirementMet)
        {
            // optional: feedback to player (toast)
            Debug.Log("[QuestItem] requirement not met");
            return;
        }
        Claim();
    }

    public void Claim()
    {
        if (claimed) return;
        if (PlayerEconomy.Instance == null)
        {
            Debug.LogError("[QuestItem] PlayerEconomy missing");
            return;
        }

        // apply reward
        switch (rewardType)
        {
            case RewardType.Coins:
                PlayerEconomy.Instance.AddCoins(rewardCoins);
                break;
            case RewardType.Shards:
                PlayerEconomy.Instance.AddShards(rewardShards);
                break;
            case RewardType.Energy:
                PlayerEconomy.Instance.AddEnergy(rewardEnergy);
                break;
        }

        claimed = true;
        if (!string.IsNullOrEmpty(questId))
            PlayerPrefs.SetInt("quest_claimed_" + questId, 1);

        UpdateVisual();

        if (claimSfx != null)
            AudioSource.PlayClipAtPoint(claimSfx, Camera.main ? Camera.main.transform.position : Vector3.zero);
    }

    // Make public so spawner can call after set up
    public void UpdateVisual()
    {
        if (goButton != null) goButton.interactable = !claimed && requirementMet;

        if (goButtonImage != null)
        {
            if (claimed && spriteClaimed != null) goButtonImage.sprite = spriteClaimed;
            else if (!requirementMet && spriteLocked != null) goButtonImage.sprite = spriteLocked;
            else if (requirementMet && spriteAvailable != null) goButtonImage.sprite = spriteAvailable;
        }

        if (goButtonText != null) goButtonText.text = claimed ? "CLAIMED" : (requirementMet ? "GO" : "LOCKED");

        // update title icon/text if you want to show reward quickly
        if (titleText != null)
        {
            string rewardDesc = rewardType == RewardType.Coins ? $"{rewardCoins:N0}" :
                                rewardType == RewardType.Shards ? $"{rewardShards}" :
                                $"{rewardEnergy}";
            titleText.text = rewardDesc;
        }
    }
}
